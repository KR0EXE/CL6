import tkinter as tk

class VirtualPet:
    def __init__(self, master):
        self.master = master
        self.master.title("Virtual Pet")
        
        # Pet stats (0 to 100 scale)
        self.hunger = 50      # 0 means full, 100 means starving
        self.happiness = 50   # 0 means sad, 100 means very happy
        self.energy = 50      # 0 means exhausted, 100 means fully rested

        self.create_widgets()
        self.update_status()  # Start the update loop

    def create_widgets(self):
        # Title label
        self.pet_label = tk.Label(self.master, text="Your Virtual Pet", font=("Helvetica", 20))
        self.pet_label.pack(pady=10)

        # Status display
        self.status_label = tk.Label(self.master, text="", font=("Helvetica", 14))
        self.status_label.pack(pady=5)

        # Buttons frame
        button_frame = tk.Frame(self.master)
        button_frame.pack(pady=10)

        # Feed button
        self.feed_button = tk.Button(button_frame, text="Feed", width=10, command=self.feed)
        self.feed_button.grid(row=0, column=0, padx=5)

        # Play button
        self.play_button = tk.Button(button_frame, text="Play", width=10, command=self.play)
        self.play_button.grid(row=0, column=1, padx=5)

        # Sleep button
        self.sleep_button = tk.Button(button_frame, text="Sleep", width=10, command=self.sleep)
        self.sleep_button.grid(row=0, column=2, padx=5)

    def feed(self):
        """Feeding the pet reduces hunger and slightly boosts happiness."""
        self.hunger = max(self.hunger - 20, 0)
        self.happiness = min(self.happiness + 5, 100)
        self.update_status()

    def play(self):
        """Playing increases happiness but uses energy and increases hunger."""
        self.happiness = min(self.happiness + 20, 100)
        self.energy = max(self.energy - 15, 0)
        self.hunger = min(self.hunger + 10, 100)
        self.update_status()

    def sleep(self):
        """Sleeping increases energy but might increase hunger a bit."""
        self.energy = min(self.energy + 30, 100)
        self.hunger = min(self.hunger + 15, 100)
        self.update_status()

    def update_status(self):
        """Update the pet's status display and schedule the next stats update."""
        status_text = (f"Hunger: {self.hunger}   |   Happiness: {self.happiness}   |   Energy: {self.energy}")
        self.status_label.config(text=status_text)
        
        # Schedule automatic stat changes (every 2 seconds)
        self.master.after(2000, self.decrease_stats)

    def decrease_stats(self):
        """Decrease or adjust stats over time to simulate the pet's ongoing needs."""
        # Increase hunger gradually
        self.hunger = min(self.hunger + 5, 100)
        # Decrease happiness gradually
        self.happiness = max(self.happiness - 5, 0)
        # Decrease energy gradually
        self.energy = max(self.energy - 5, 0)

        # You could also add logic here to warn if stats reach critical levels.

        self.update_status()

def main():
    root = tk.Tk()
    pet_app = VirtualPet(root)
    root.mainloop()

if __name__ == "__main__":
    main()
