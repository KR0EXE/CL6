import tkinter as tk
from tkinter import filedialog
from PIL import Image, ImageTk

class VirtualPet:
    def __init__(self, master):
        self.master = master
        self.master.title("Virtual Pet")

        # Pet stats (scale from 0 to 100)
        self.hunger = 50
        self.happiness = 50
        self.energy = 50

        # Load default image
        self.pet_image = None
        self.pet_label = tk.Label(self.master)
        self.pet_label.pack(pady=10)

        # UI Elements
        self.create_widgets()
        self.update_status()

    def create_widgets(self):
        """Create buttons, labels, and file upload options."""
        # Status Label
        self.status_label = tk.Label(self.master, text="", font=("Helvetica", 14))
        self.status_label.pack(pady=5)

        # Button Frame
        button_frame = tk.Frame(self.master)
        button_frame.pack(pady=10)

        # Buttons for Interactions
        self.feed_button = tk.Button(button_frame, text="Feed", width=10, command=self.feed)
        self.feed_button.grid(row=0, column=0, padx=5)

        self.play_button = tk.Button(button_frame, text="Play", width=10, command=self.play)
        self.play_button.grid(row=0, column=1, padx=5)

        self.sleep_button = tk.Button(button_frame, text="Sleep", width=10, command=self.sleep)
        self.sleep_button.grid(row=0, column=2, padx=5)

        # Upload Image Buttons
        self.upload_button = tk.Button(self.master, text="Upload Pet Image", command=self.upload_image)
        self.upload_button.pack(pady=5)

    def upload_image(self):
        """Allows the user to upload an image for the pet."""
        file_path = filedialog.askopenfilename(filetypes=[("Image Files", "*.png;*.jpg;*.jpeg;*.gif")])
        if file_path:
            self.display_image(file_path)

    def display_image(self, file_path):
        """Displays an image in the UI."""
        image = Image.open(file_path)
        image = image.resize((150, 150), Image.Resampling.LANCZOS)  # Resize for display
        self.pet_image = ImageTk.PhotoImage(image)
        self.pet_label.config(image=self.pet_image)

    def feed(self):
        """Feeding the pet reduces hunger and slightly boosts happiness."""
        self.hunger = max(self.hunger - 20, 0)
        self.happiness = min(self.happiness + 5, 100)
        self.update_status()

    def play(self):
        """Playing increases happiness but uses energy and increases hunger."""
        self.happiness = min(self.happiness + 20, 100)
        self.energy = max(self.energy - 15, 0)
        self.hunger = min(self.hunger + 10, 100)
        self.update_status()

    def sleep(self):
        """Sleeping increases energy but might increase hunger a bit."""
        self.energy = min(self.energy + 30, 100)
        self.hunger = min(self.hunger + 15, 100)
        self.update_status()

    def update_status(self):
        """Updates the pet's status and schedules periodic updates."""
        status_text = f"Hunger: {self.hunger}   |   Happiness: {self.happiness}   |   Energy: {self.energy}"
        self.status_label.config(text=status_text)

        # Auto-update stats every 2 seconds
        self.master.after(2000, self.decrease_stats)

    def decrease_stats(self):
        """Decreases stats over time to simulate pet care requirements."""
        self.hunger = min(self.hunger + 5, 100)
        self.happiness = max(self.happiness - 5, 0)
        self.energy = max(self.energy - 5, 0)

        self.update_status()

def main():
    root = tk.Tk()
    pet_app = VirtualPet(root)
    root.mainloop()

if __name__ == "__main__":
    main()
