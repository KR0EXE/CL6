import sys
import random
from PyQt5.QtWidgets import QApplication, QWidget, QDesktopWidget
from PyQt5.QtCore import Qt, QTimer, QPointF
from PyQt5.QtGui import QPainter, QColor, QIcon

# If running on Windows, import ctypes for native window manipulation.
if sys.platform.startswith("win"):
    import ctypes

class OverlayWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()
        self.initParticles()
        
    def initUI(self):
        self.setWindowTitle("Screen Augmentation Overlay")
        # Remove the Qt.Tool flag so that the window appears in the taskbar.
        self.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint)
        # Set the custom icon (appears on the taskbar and window lists).
        self.setWindowIcon(QIcon("unique_icon.png"))
        # Enable per-pixel transparency.
        self.setAttribute(Qt.WA_TranslucentBackground)
        # Make the window ignore mouse events at the Qt level.
        self.setAttribute(Qt.WA_TransparentForMouseEvents)
        
        # Resize to cover the entire screen.
        self.setGeometry(QDesktopWidget().screenGeometry())
        
        # Show the window first so that a valid window ID is available.
        self.show()
        
        # Windows-specific hack: Set extended window styles to allow click-through.
        if sys.platform.startswith("win"):
            hwnd = self.winId().__int__()
            WS_EX_LAYERED = 0x00080000
            WS_EX_TRANSPARENT = 0x00000020
            GWL_EXSTYLE = -20
            # Retrieve current extended style.
            current_style = ctypes.windll.user32.GetWindowLongW(hwnd, GWL_EXSTYLE)
            # Add WS_EX_LAYERED and WS_EX_TRANSPARENT so that the window is click-through.
            new_style = current_style | WS_EX_LAYERED | WS_EX_TRANSPARENT
            ctypes.windll.user32.SetWindowLongW(hwnd, GWL_EXSTYLE, new_style)
        
        # Start a timer to update the particle animation.
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.updateParticles)
        self.timer.start(30)  # Approximately 33 frames per second.
    
    def initParticles(self):
        # Initialize a list of particles with random positions, velocities, sizes, and colors.
        self.particles = []
        for _ in range(100):
            x = random.uniform(0, self.width())
            y = random.uniform(0, self.height())
            dx = random.uniform(-2, 2)
            dy = random.uniform(-2, 2)
            radius = random.uniform(5, 15)
            color = QColor(
                random.randint(0, 255),
                random.randint(0, 255),
                random.randint(0, 255),
                random.randint(100, 200)  # Semi-transparent.
            )
            particle = {
                'pos': QPointF(x, y),
                'vel': QPointF(dx, dy),
                'radius': radius,
                'color': color
            }
            self.particles.append(particle)
    
    def updateParticles(self):
        # Update each particle's position and bounce them off the screen edges.
        for particle in self.particles:
            pos = particle['pos']
            vel = particle['vel']
            new_x = pos.x() + vel.x()
            new_y = pos.y() + vel.y()
            
            if new_x < 0 or new_x > self.width():
                vel.setX(-vel.x())
            if new_y < 0 or new_y > self.height():
                vel.setY(-vel.y())
            
            particle['pos'] = QPointF(pos.x() + vel.x(), pos.y() + vel.y())
        
        # Trigger a repaint.
        self.update()
    
    def paintEvent(self, event):
        # Repaint the widget.
        painter = QPainter(self)
        painter.setRenderHint(QPainter.Antialiasing)
        
        # Draw a semi-transparent black rectangle over the window to create a trailing effect.
        painter.fillRect(self.rect(), QColor(0, 0, 0, 10))
        
        # Draw each particle.
        for particle in self.particles:
            painter.setBrush(particle['color'])
            painter.setPen(Qt.NoPen)
            pos = particle['pos']
            radius = particle['radius']
            painter.drawEllipse(pos, radius, radius)

def main():
    app = QApplication(sys.argv)
    # Set the application icon (for the taskbar).
    app.setWindowIcon(QIcon("unique_icon.png"))
    overlay = OverlayWindow()
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()
