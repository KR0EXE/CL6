import pygame
from pygame.locals import DOUBLEBUF, OPENGL, FULLSCREEN
import moderngl
import numpy as np
import time
import math
import random

# Initialize pygame and create a fullscreen window.
pygame.init()
display_info = pygame.display.Info()
width, height = display_info.current_w, display_info.current_h
pygame.display.set_mode((width, height), DOUBLEBUF | OPENGL | FULLSCREEN)
pygame.display.set_caption("High-End Evolving Psychedelic Visuals")

# Create a ModernGL context from the pygame OpenGL context.
ctx = moderngl.create_context(require=330)

# Define a full-screen quad (two triangles covering the entire screen).
vertices = np.array([
    -1.0, -1.0,
     1.0, -1.0,
    -1.0,  1.0,
    -1.0,  1.0,
     1.0, -1.0,
     1.0,  1.0,
], dtype='f4')

vbo = ctx.buffer(vertices.tobytes())

# Load 1500 shader versions with varying styles
shader_variants = []
for i in range(1500):
    seed = random.uniform(0.1, 10.0)
    speed_factor = random.uniform(0.5, 2.0)
    pattern_variation = random.uniform(1.0, 5.0)
    style_factor = random.uniform(0.5, 3.0)
    color_shift = random.uniform(0.5, 2.0)
    distortion_factor = random.uniform(0.5, 3.0)
    wave_factor = random.uniform(0.2, 1.5)
    zoom_factor = random.uniform(0.5, 3.0)
    rotation_speed = random.uniform(0.1, 1.0)
    dynamic_shift = random.uniform(0.3, 1.7)
    layer_intensity = random.uniform(0.4, 2.5)
    style_transition = random.uniform(0.5, 2.0)
    
    fragment_shader = f"""
    #version 330
    uniform float time;
    uniform vec2 resolution;
    in vec2 v_texcoord;
    out vec4 fragColor;
    
    vec3 palette(float t) {{
        return 0.5 + 0.5 * sin(6.2831 * (vec3(0.0, 0.33, 0.67) + t * {color_shift}));
    }}
    
    float noise(vec2 uv) {{
        return fract(sin(dot(uv.xy, vec2(12.9898, 78.233))) * 43758.5453);
    }}
    
    float pattern(vec2 uv, float time) {{
        uv += vec2(sin(time * {distortion_factor}) * 0.1, cos(time * {distortion_factor}) * 0.1);
        uv *= {zoom_factor};
        uv = mat2(cos(time * {rotation_speed}), -sin(time * {rotation_speed}), sin(time * {rotation_speed}), cos(time * {rotation_speed})) * uv;
        float p = noise(uv * {seed * 10.0}) * sin(time * {speed_factor});
        p += sin(uv.x * {seed * 20.0} + uv.y * {seed * 15.0} + time * {speed_factor * 0.8});
        p += cos(uv.x * {seed * 30.0} - uv.y * {seed * 25.0} + time * {speed_factor * 1.2});
        p *= mix(1.0, sin(time * {style_factor}), 0.5);
        return p * 0.3 + 0.5;
    }}
    
    void main() {{
        vec2 uv = gl_FragCoord.xy / resolution;
        uv = uv * 2.0 - 1.0;
        uv.x *= resolution.x / resolution.y;
        float colorValue = pattern(uv, time);
        vec3 color = palette(colorValue);
        fragColor = vec4(color, 1.0);
    }}
    """
    shader_variants.append(fragment_shader)

# Compile shaders and store them
compiled_shaders = [ctx.program(vertex_shader="""
#version 330
in vec2 in_position;
out vec2 v_texcoord;
void main() {
    v_texcoord = in_position * 0.5 + 0.5;
    gl_Position = vec4(in_position, 0.0, 1.0);
}
""", fragment_shader=fs) for fs in shader_variants]

# Set up VAO
vao = ctx.vertex_array(compiled_shaders[0], [(vbo, '2f', 'in_position')])

# Set the resolution uniform
for shader in compiled_shaders:
    shader['resolution'].value = (width, height)

# Start time tracking
start_time = time.time()
shader_index = 0
swap_time = random.uniform(10, 60)  # Change shader every 10-60 seconds

# Main loop
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.KEYDOWN:
            if event.key in (pygame.K_q, pygame.K_ESCAPE):
                running = False
    
    # Swap shaders periodically
    current_time = time.time() - start_time
    if current_time > swap_time:
        shader_index = (shader_index + 1) % len(compiled_shaders)
        vao = ctx.vertex_array(compiled_shaders[shader_index], [(vbo, '2f', 'in_position')])
        swap_time = current_time + random.uniform(10, 60)
    
    # Update time uniform
    compiled_shaders[shader_index]['time'].value = current_time
    
    # Clear screen and render quad
    ctx.clear(0.0, 0.0, 0.0, 1.0)
    vao.render()
    
    # Swap buffers
    pygame.display.flip()
    pygame.time.wait(10)

pygame.quit()
